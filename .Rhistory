### Run MCMC Analysis using jags
library(R2jags)
library(rstan)
library(rjags)
dyn.load(file, DLLpath = DLLpath, ...)
library("jagsUI", lib.loc="~/Library/R/3.5/library")
detach("package:jagsUI", unload=TRUE)
library("R2jags", lib.loc="~/Library/R/3.5/library")
library("R2WinBUGS", lib.loc="~/Library/R/3.5/library")
library("rjags", lib.loc="~/Library/R/3.5/library")
library("jagsUI", lib.loc="~/Library/R/3.5/library")
update.packages("jagsUI")
update.packages("rjags")
update.packages("r2jags")
library(R2jags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("https://sourceforge.net/projects/mcmc-jags/files/JAGS/4.x/Mac%20OS%20X/",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
remove.packages("rjags", lib="~/Library/R/3.5/library")
remove.packages("jagsUI", lib="~/Library/R/3.5/library")
remove.packages("R2jags", lib="~/Library/R/3.5/library")
library("rjags", lib.loc="~/Library/R/3.5/library")
remove.packages("rjags", lib="~/Library/R/3.5/library")
library("R2WinBUGS", lib.loc="~/Library/R/3.5/library")
library("R2jags", lib.loc="~/Library/R/3.5/library")
install.packages("rjags")
library("rjags", lib.loc="~/Library/R/3.5/library")
remove.packages("rjags", lib="~/Library/R/3.5/library")
remove.packages("R2jags", lib="~/Library/R/3.5/library")
install.packages("jagsUI")
library(jagsUI)
library("jagsUI", lib.loc="~/Library/R/3.5/library")
install.packages("~/Downloads/JAGS-4.3.0.dmg", repos = NULL)
library("jagsUI", lib.loc="~/Library/R/3.5/library")
detach("package:jagsUI", unload=TRUE)
remove.packages("jagsUI", lib="~/Library/R/3.5/library")
library("rjags", lib.loc="~/Library/R/3.5/library")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz")
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",)
remove.packages("rjags", lib="~/Library/R/3.5/library")
library(geosphere)
daylength(45,59)
daylength(45,59+61)
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Set working directory:
setwd("~/Documents/GitHub/recphen")
library("splines")
# Set working directory:
setwd("~/Documents/GitHub/recphen")
library("splines")
library("rstan")
library(mgcv)
#prepare for stan
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#Read in WA rec data (just the early years for now)
d<-read.csv("analyses/output/wacrdat_1984_1993.csv", header=TRUE)#for now just use the old data
source("analyses/wcrcstanleadin.R")
#try one year at a time for now
years<-unique(fishsum.yr$year)
quartz(height=8, width=20)
par(mfrow=c(2,3))
y=1987
dat=fishsum.yr[fishsum.yr$year==years[y],]
X <- as.integer(dat$week) #weeks
#num_knots <- 13 #11 interior knots and 2 boundary knots
spline_degree <- 3
B <- t(bs(X, knots=seq(min(X),max(X),5), degree=spline_degree, intercept = TRUE)) # creating the B-splines
num_data <- length(X); num_basis <- nrow(B)
Y <- log(dat$chin+1)
OFFSET<-log(dat$anglers)
sm<-stan_model("analyses/recmod.stan")
fit<-sampling(sm,iter=500,control = list(adapt_delta=0.95))
#plot(fit)
ff<-extract(fit)
Y_hat_med <- array(NA, length(Y))
Y_hat_ub <- array(NA, length(Y))
Y_hat_lb <- array(NA, length(Y))
for (i in 1:length(Y)) {
Y_hat_med[i] <- median(ff$Y_hat[,i]);
Y_hat_lb[i] <- quantile(ff$Y_hat[,i],probs = 0.25)
Y_hat_ub[i] <- quantile(ff$Y_hat[,i],probs = 0.75)
}
sm<-stan_model("analyses/recmod.stan")
#simulate some salmon catch data and fit splits to it
#super useful markdown file on splines in stan!
#https://github.com/milkha/Splines_in_Stan/blob/master/splines_in_stan.Rmd
#https://mc-stan.org/users/documentation/case-studies/splines_in_stan.html
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
setwd("~/Documents/GitHub/recphen")
# Load libraries
library("splines")
library("rstan")
#library(mgcv)
#prepare for stan
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#Read in WA rec data (just the early years for now)
d<-read.csv("analyses/output/wacrdat_1984_1993.csv", header=TRUE)#for now just use the old data
#prep the data for the model
source("analyses/wcrcstanleadin.R")
#try one year at a time for now
years<-unique(fishsum.yr$year)
quartz(height=8, width=20)
par(mfrow=c(2,3))
dat=fishsum.yr[fishsum.yr$year==years[y],]
years
y=1987
dat=fishsum.yr[fishsum.yr$year==years[y],]
dat
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#Read in WA rec data (just the early years for now)
d<-read.csv("analyses/output/wacrdat_1984_1993.csv", header=TRUE)#for now just use the old data
#prep the data for the model
source("analyses/wcrcstanleadin.R")
head(d)
head(fishdat)
#prep the data for the model
source("analyses/wcrcstanleadin.R")
head(fishdat)
dim(fishsum)
dim(fishsum.yr)
#try one year at a time for now
years<-unique(fishsum.yr$year)
dat=fishsum.yr[fishsum.yr$year==years[y],]
head(dat)
head(fishsum.yr)
y
y=1
dat=fishsum.yr[fishsum.yr$year==years[y],]
X <- as.integer(dat$week) #weeks
#num_knots <- 13 #11 interior knots and 2 boundary knots
spline_degree <- 3
B <- t(bs(X, knots=seq(min(X),max(X),5), degree=spline_degree, intercept = TRUE)) # creating the B-splines
num_data <- length(X); num_basis <- nrow(B)
Y <- log(dat$chin+1)
OFFSET<-log(dat$anglers)
sm<-stan_model("analyses/recmod.stan")
fit<-sampling(sm,iter=500,control = list(adapt_delta=0.95))
#plot(fit)
ff<-extract(fit)
Y_hat_med <- array(NA, length(Y))
Y_hat_ub <- array(NA, length(Y))
Y_hat_lb <- array(NA, length(Y))
for (i in 1:length(Y)) {
Y_hat_med[i] <- median(ff$Y_hat[,i]);
Y_hat_lb[i] <- quantile(ff$Y_hat[,i],probs = 0.25)
Y_hat_ub[i] <- quantile(ff$Y_hat[,i],probs = 0.75)
}
plot(X,Y, col="azure4", xlab="week", ylab="log(chincatch)",bty="l", main=paste(years[y]))
polygon(c(rev(X), X), c(rev(Y_hat_lb), Y_hat_ub), col = 'grey80', border = NA)
lines(X, Y_hat_med, col="Red", lw=2)
